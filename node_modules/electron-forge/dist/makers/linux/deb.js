'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSupportedOnCurrentPlatform = undefined;

var _bluebird = require('bluebird');

exports.debianArch = debianArch;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ensureOutput = require('../../util/ensure-output');

var _isInstalled = require('../../util/is-installed');

var _isInstalled2 = _interopRequireDefault(_isInstalled);

var _linuxConfig = require('../../util/linux-config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isSupportedOnCurrentPlatform = exports.isSupportedOnCurrentPlatform = (() => {
  var _ref = (0, _bluebird.coroutine)(function* () {
    return (0, _isInstalled2.default)('electron-installer-debian');
  });

  return function isSupportedOnCurrentPlatform() {
    return _ref.apply(this, arguments);
  };
})();

function debianArch(nodeArch) {
  switch (nodeArch) {
    case 'ia32':
      return 'i386';
    case 'x64':
      return 'amd64';
    case 'armv7l':
      return 'armhf';
    case 'arm':
      return 'armel';
    default:
      return nodeArch;
  }
}

exports.default = (() => {
  var _ref2 = (0, _bluebird.coroutine)(function* ({ dir, targetArch, forgeConfig, packageJSON }) {
    const installer = require('electron-installer-debian');

    const arch = debianArch(targetArch);
    const config = (0, _linuxConfig.populateConfig)({ forgeConfig, configKey: 'electronInstallerDebian', targetArch });
    const name = config.options.name || packageJSON.name;
    const versionedName = `${name}_${packageJSON.version}_${arch}`;
    const outPath = _path2.default.resolve(dir, '../make', `${versionedName}.deb`);

    yield (0, _ensureOutput.ensureFile)(outPath);
    const debianConfig = (0, _linuxConfig.linuxConfig)({
      config,
      pkgArch: arch,
      dir,
      outPath
    });

    yield installer(debianConfig);
    return [outPath];
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2Vycy9saW51eC9kZWIuanMiXSwibmFtZXMiOlsiZGViaWFuQXJjaCIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJub2RlQXJjaCIsImRpciIsInRhcmdldEFyY2giLCJmb3JnZUNvbmZpZyIsInBhY2thZ2VKU09OIiwiaW5zdGFsbGVyIiwicmVxdWlyZSIsImFyY2giLCJjb25maWciLCJjb25maWdLZXkiLCJuYW1lIiwib3B0aW9ucyIsInZlcnNpb25lZE5hbWUiLCJ2ZXJzaW9uIiwib3V0UGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiZGViaWFuQ29uZmlnIiwicGtnQXJjaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1FBUWdCQSxVLEdBQUFBLFU7O0FBUmhCOzs7O0FBRUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUVPLE1BQU1DO0FBQUEsc0NBQStCO0FBQUEsV0FBWSwyQkFBWSwyQkFBWixDQUFaO0FBQUEsR0FBL0I7O0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTjs7QUFFQSxTQUFTRCxVQUFULENBQW9CRSxRQUFwQixFQUE4QjtBQUNuQyxVQUFRQSxRQUFSO0FBQ0UsU0FBSyxNQUFMO0FBQWEsYUFBTyxNQUFQO0FBQ2IsU0FBSyxLQUFMO0FBQVksYUFBTyxPQUFQO0FBQ1osU0FBSyxRQUFMO0FBQWUsYUFBTyxPQUFQO0FBQ2YsU0FBSyxLQUFMO0FBQVksYUFBTyxPQUFQO0FBQ1o7QUFBUyxhQUFPQSxRQUFQO0FBTFg7QUFPRDs7O3VDQUVjLFdBQU8sRUFBRUMsR0FBRixFQUFPQyxVQUFQLEVBQW1CQyxXQUFuQixFQUFnQ0MsV0FBaEMsRUFBUCxFQUF5RDtBQUN0RSxVQUFNQyxZQUFZQyxRQUFRLDJCQUFSLENBQWxCOztBQUVBLFVBQU1DLE9BQU9ULFdBQVdJLFVBQVgsQ0FBYjtBQUNBLFVBQU1NLFNBQVMsaUNBQWUsRUFBRUwsV0FBRixFQUFlTSxXQUFXLHlCQUExQixFQUFxRFAsVUFBckQsRUFBZixDQUFmO0FBQ0EsVUFBTVEsT0FBT0YsT0FBT0csT0FBUCxDQUFlRCxJQUFmLElBQXVCTixZQUFZTSxJQUFoRDtBQUNBLFVBQU1FLGdCQUFpQixHQUFFRixJQUFLLElBQUdOLFlBQVlTLE9BQVEsSUFBR04sSUFBSyxFQUE3RDtBQUNBLFVBQU1PLFVBQVVDLGVBQUtDLE9BQUwsQ0FBYWYsR0FBYixFQUFrQixTQUFsQixFQUE4QixHQUFFVyxhQUFjLE1BQTlDLENBQWhCOztBQUVBLFVBQU0sOEJBQVdFLE9BQVgsQ0FBTjtBQUNBLFVBQU1HLGVBQWUsOEJBQVk7QUFDL0JULFlBRCtCO0FBRS9CVSxlQUFTWCxJQUZzQjtBQUcvQk4sU0FIK0I7QUFJL0JhO0FBSitCLEtBQVosQ0FBckI7O0FBT0EsVUFBTVQsVUFBVVksWUFBVixDQUFOO0FBQ0EsV0FBTyxDQUFDSCxPQUFELENBQVA7QUFDRCxHIiwiZmlsZSI6Im1ha2Vycy9saW51eC9kZWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgZW5zdXJlRmlsZSB9IGZyb20gJy4uLy4uL3V0aWwvZW5zdXJlLW91dHB1dCc7XG5pbXBvcnQgaXNJbnN0YWxsZWQgZnJvbSAnLi4vLi4vdXRpbC9pcy1pbnN0YWxsZWQnO1xuaW1wb3J0IHsgbGludXhDb25maWcsIHBvcHVsYXRlQ29uZmlnIH0gZnJvbSAnLi4vLi4vdXRpbC9saW51eC1jb25maWcnO1xuXG5leHBvcnQgY29uc3QgaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSA9IGFzeW5jICgpID0+IGlzSW5zdGFsbGVkKCdlbGVjdHJvbi1pbnN0YWxsZXItZGViaWFuJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJpYW5BcmNoKG5vZGVBcmNoKSB7XG4gIHN3aXRjaCAobm9kZUFyY2gpIHtcbiAgICBjYXNlICdpYTMyJzogcmV0dXJuICdpMzg2JztcbiAgICBjYXNlICd4NjQnOiByZXR1cm4gJ2FtZDY0JztcbiAgICBjYXNlICdhcm12N2wnOiByZXR1cm4gJ2FybWhmJztcbiAgICBjYXNlICdhcm0nOiByZXR1cm4gJ2FybWVsJztcbiAgICBkZWZhdWx0OiByZXR1cm4gbm9kZUFyY2g7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHsgZGlyLCB0YXJnZXRBcmNoLCBmb3JnZUNvbmZpZywgcGFja2FnZUpTT04gfSkgPT4ge1xuICBjb25zdCBpbnN0YWxsZXIgPSByZXF1aXJlKCdlbGVjdHJvbi1pbnN0YWxsZXItZGViaWFuJyk7XG5cbiAgY29uc3QgYXJjaCA9IGRlYmlhbkFyY2godGFyZ2V0QXJjaCk7XG4gIGNvbnN0IGNvbmZpZyA9IHBvcHVsYXRlQ29uZmlnKHsgZm9yZ2VDb25maWcsIGNvbmZpZ0tleTogJ2VsZWN0cm9uSW5zdGFsbGVyRGViaWFuJywgdGFyZ2V0QXJjaCB9KTtcbiAgY29uc3QgbmFtZSA9IGNvbmZpZy5vcHRpb25zLm5hbWUgfHwgcGFja2FnZUpTT04ubmFtZTtcbiAgY29uc3QgdmVyc2lvbmVkTmFtZSA9IGAke25hbWV9XyR7cGFja2FnZUpTT04udmVyc2lvbn1fJHthcmNofWA7XG4gIGNvbnN0IG91dFBhdGggPSBwYXRoLnJlc29sdmUoZGlyLCAnLi4vbWFrZScsIGAke3ZlcnNpb25lZE5hbWV9LmRlYmApO1xuXG4gIGF3YWl0IGVuc3VyZUZpbGUob3V0UGF0aCk7XG4gIGNvbnN0IGRlYmlhbkNvbmZpZyA9IGxpbnV4Q29uZmlnKHtcbiAgICBjb25maWcsXG4gICAgcGtnQXJjaDogYXJjaCxcbiAgICBkaXIsXG4gICAgb3V0UGF0aCxcbiAgfSk7XG5cbiAgYXdhaXQgaW5zdGFsbGVyKGRlYmlhbkNvbmZpZyk7XG4gIHJldHVybiBbb3V0UGF0aF07XG59O1xuIl19