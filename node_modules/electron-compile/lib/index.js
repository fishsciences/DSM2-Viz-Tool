'use strict';

var _configParser = require('./config-parser');

var configParser = _interopRequireWildcard(_configParser);

var _compilerHost = require('./compiler-host');

var _compilerHost2 = _interopRequireDefault(_compilerHost);

var _fileChangeCache = require('./file-change-cache');

var _fileChangeCache2 = _interopRequireDefault(_fileChangeCache);

var _compileCache = require('./compile-cache');

var _compileCache2 = _interopRequireDefault(_compileCache);

var _protocolHook = require('./protocol-hook');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

//import {enableLiveReload} from './live-reload';
//import {watchPath} from './pathwatcher-rx';

// NB: Patch a bug in Electron that affects electron-prebuilt-compile that
// we can't fix any other way. Yes it _does_ feelbadman.jpg
if ('versions' in process && process.versions.electron === "3.0.0-beta.1") {
  const fs = require('fs');
  fs.statSyncNoException = function () {
    try {
      return fs.statSync(...arguments);
    } catch (e) {
      return null;
    }
  };
}

let enableLiveReload = null;
let watchPath = null;

module.exports = Object.assign({
  // NB: delay-load live-reload so we don't load RxJS in production
  enableLiveReload: function () {
    enableLiveReload = enableLiveReload || require('./live-reload').enableLiveReload;
    return enableLiveReload(...arguments);
  },
  watchPath: function () {
    watchPath = watchPath || require('./pathwatcher-rx').watchPath;
    return watchPath(...arguments);
  }
}, configParser, { CompilerHost: _compilerHost2.default, FileChangedCache: _fileChangeCache2.default, CompileCache: _compileCache2.default, addBypassChecker: _protocolHook.addBypassChecker });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJjb25maWdQYXJzZXIiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJlbGVjdHJvbiIsImZzIiwicmVxdWlyZSIsInN0YXRTeW5jTm9FeGNlcHRpb24iLCJzdGF0U3luYyIsImUiLCJlbmFibGVMaXZlUmVsb2FkIiwid2F0Y2hQYXRoIiwibW9kdWxlIiwiZXhwb3J0cyIsIk9iamVjdCIsImFzc2lnbiIsIkNvbXBpbGVySG9zdCIsIkZpbGVDaGFuZ2VkQ2FjaGUiLCJDb21waWxlQ2FjaGUiLCJhZGRCeXBhc3NDaGVja2VyIl0sIm1hcHBpbmdzIjoiOztBQUFBOztJQUFZQSxZOztBQUVaOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJLGNBQWNDLE9BQWQsSUFBeUJBLFFBQVFDLFFBQVIsQ0FBaUJDLFFBQWpCLEtBQThCLGNBQTNELEVBQTJFO0FBQ3pFLFFBQU1DLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0FELEtBQUdFLG1CQUFILEdBQXlCLFlBQWE7QUFDcEMsUUFBSTtBQUNGLGFBQU9GLEdBQUdHLFFBQUgsQ0FBWSxZQUFaLENBQVA7QUFDRCxLQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQU5EO0FBT0Q7O0FBRUQsSUFBSUMsbUJBQW1CLElBQXZCO0FBQ0EsSUFBSUMsWUFBWSxJQUFoQjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQkMsT0FBT0MsTUFBUCxDQUFjO0FBQzdCO0FBQ0FMLG9CQUFrQixZQUFrQjtBQUNsQ0EsdUJBQW1CQSxvQkFBb0JKLFFBQVEsZUFBUixFQUF5QkksZ0JBQWhFO0FBQ0EsV0FBT0EsaUJBQWlCLFlBQWpCLENBQVA7QUFDRCxHQUw0QjtBQU03QkMsYUFBVyxZQUFrQjtBQUMzQkEsZ0JBQVlBLGFBQWFMLFFBQVEsa0JBQVIsRUFBNEJLLFNBQXJEO0FBQ0EsV0FBT0EsVUFBVSxZQUFWLENBQVA7QUFDRDtBQVQ0QixDQUFkLEVBV2ZWLFlBWGUsRUFZZixFQUFFZSxvQ0FBRixFQUFnQkMsMkNBQWhCLEVBQWtDQyxvQ0FBbEMsRUFBZ0RDLGdEQUFoRCxFQVplLENBQWpCIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY29uZmlnUGFyc2VyIGZyb20gJy4vY29uZmlnLXBhcnNlcic7XG5cbmltcG9ydCBDb21waWxlckhvc3QgZnJvbSAnLi9jb21waWxlci1ob3N0JztcbmltcG9ydCBGaWxlQ2hhbmdlZENhY2hlIGZyb20gJy4vZmlsZS1jaGFuZ2UtY2FjaGUnO1xuaW1wb3J0IENvbXBpbGVDYWNoZSBmcm9tICcuL2NvbXBpbGUtY2FjaGUnO1xuaW1wb3J0IHthZGRCeXBhc3NDaGVja2VyfSBmcm9tICcuL3Byb3RvY29sLWhvb2snO1xuLy9pbXBvcnQge2VuYWJsZUxpdmVSZWxvYWR9IGZyb20gJy4vbGl2ZS1yZWxvYWQnO1xuLy9pbXBvcnQge3dhdGNoUGF0aH0gZnJvbSAnLi9wYXRod2F0Y2hlci1yeCc7XG5cbi8vIE5COiBQYXRjaCBhIGJ1ZyBpbiBFbGVjdHJvbiB0aGF0IGFmZmVjdHMgZWxlY3Ryb24tcHJlYnVpbHQtY29tcGlsZSB0aGF0XG4vLyB3ZSBjYW4ndCBmaXggYW55IG90aGVyIHdheS4gWWVzIGl0IF9kb2VzXyBmZWVsYmFkbWFuLmpwZ1xuaWYgKCd2ZXJzaW9ucycgaW4gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zLmVsZWN0cm9uID09PSBcIjMuMC4wLWJldGEuMVwiKSB7XG4gIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgZnMuc3RhdFN5bmNOb0V4Y2VwdGlvbiA9ICguLi5hcmdzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmcy5zdGF0U3luYyguLi5hcmdzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmxldCBlbmFibGVMaXZlUmVsb2FkID0gbnVsbDtcbmxldCB3YXRjaFBhdGggPSBudWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oe1xuICAvLyBOQjogZGVsYXktbG9hZCBsaXZlLXJlbG9hZCBzbyB3ZSBkb24ndCBsb2FkIFJ4SlMgaW4gcHJvZHVjdGlvblxuICBlbmFibGVMaXZlUmVsb2FkOiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgZW5hYmxlTGl2ZVJlbG9hZCA9IGVuYWJsZUxpdmVSZWxvYWQgfHwgcmVxdWlyZSgnLi9saXZlLXJlbG9hZCcpLmVuYWJsZUxpdmVSZWxvYWQ7XG4gICAgcmV0dXJuIGVuYWJsZUxpdmVSZWxvYWQoLi4uYXJncyk7XG4gIH0sXG4gIHdhdGNoUGF0aDogZnVuY3Rpb24oLi4uYXJncykge1xuICAgIHdhdGNoUGF0aCA9IHdhdGNoUGF0aCB8fCByZXF1aXJlKCcuL3BhdGh3YXRjaGVyLXJ4Jykud2F0Y2hQYXRoO1xuICAgIHJldHVybiB3YXRjaFBhdGgoLi4uYXJncyk7XG4gIH0sXG59LFxuICBjb25maWdQYXJzZXIsXG4gIHsgQ29tcGlsZXJIb3N0LCBGaWxlQ2hhbmdlZENhY2hlLCBDb21waWxlQ2FjaGUsIGFkZEJ5cGFzc0NoZWNrZXIgfVxuKTtcbiJdfQ==