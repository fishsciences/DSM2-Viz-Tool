library(rhdf5)
library(lubridate)
# this app also uses plyr package (i.e., need to be installed), but are not loaded here because used sparingly (one or two functions from each package)
#
# h5ls("0_0_23200_1000.h5")
h5readAttributes(file = "0_0_23200_1000.h5",
name = "hydro/data/channel flow")
# this app also uses plyr package (i.e., need to be installed), but are not loaded here because used sparingly (one or two functions from each package)
#
# h5ls("0_0_23200_1000.h5")
test.attr = h5readAttributes(file = "0_0_23200_1000.h5",
name = "hydro/data/channel flow")
test.attr$start_time
# test = h5read("0_0_23200_1000.h5", "/hydro/data/channel flow")
# test = h5read("0_0_23200_1000.h5", "/hydro/geometry/channel_bottom")
# con = h5file(name = "../Planning Simulations/2016/DSM2 Output/out/0_0_23200_1000.h5", mode = "r")
# lubridate::dmy_hm(h5attr(con["/hydro"], "Start time string"))
#
# # # 1st dimension of flow/area arrays is datetime
# # h5attr(con["/hydro/data/channel flow"], "interval")
# flow = readDataSet(con["/hydro/data/channel flow"])
dates = seq(from = ymd_hms(test.attr$start_time),
length.out = 100, # need to replace with actual dimension
by = test.attr$interval)
# test = h5read("0_0_23200_1000.h5", "/hydro/data/channel flow")
# test = h5read("0_0_23200_1000.h5", "/hydro/geometry/channel_bottom")
# con = h5file(name = "../Planning Simulations/2016/DSM2 Output/out/0_0_23200_1000.h5", mode = "r")
# lubridate::dmy_hm(h5attr(con["/hydro"], "Start time string"))
#
# # # 1st dimension of flow/area arrays is datetime
# # h5attr(con["/hydro/data/channel flow"], "interval")
# flow = readDataSet(con["/hydro/data/channel flow"])
dates = seq(from = ymd_hms(test.attr$start_time),
length.out = 100, # need to replace with actual dimension
by = "15 min")  # need to test interval [test.attr$interval] to see if it equals "15min" if not give warning that not currently supported
dates
?q
options(shiny.maxRequestSize = 500*1024^2) # increase upload size to 500 MB
# source("https://bioconductor.org/biocLite.R")
# biocLite("rhdf5")
library(shiny)
library(leaflet)
library(dplyr)
library(ggplot2)
library(rhdf5)
library(lubridate)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
install.packages("shinyWidgets")
?duplicated
duplicated(c("a", "a", "b", "c"))
runApp()
shp
View(shp@data)
duplicated(c("a", "a", "a" "b", "c"))
duplicated(c("a", "a", "a", "b", "c"))
runApp()
# h5ls("0_0_23200_1000.h5")
# test.attr = h5readAttributes(file = "0_0_23200_1000.h5",
#                  name = "hydro/data/channel flow")
test = h5read("0_0_23200_1000.h5", "/hydro/data/channel flow")
h5ls("0_0_23200_1000.h5")
# test = h5read("0_0_23200_1000.h5", "/hydro/geometry/channel_bottom")
# lubridate::dmy_hm(h5attr(con["/hydro"], "Start time string"))
#
# # # 1st dimension of flow/area arrays is datetime
h5attr(con["/hydro/data/channel flow"], "start_time")
rhdf5::h5readAttributes("0_0_23200_1000.h5", "start_time")
?h5readAttributes
test = h5read("0_0_23200_1000.h5", "/hydro/data/channel flow", read.attributes = TRUE)
h5readAttributes("0_0_23200_1000.h5", "/hydro/data/channel flow")
runApp()
runApp()
?fileInput
runApp()
runApp()
runApp()
?all.equal
unique(list(a = 1:3, b = 2:4))
h5readAttributes(0_0_23200_1000.h5, "/hydro/data/channel flow")
h5readAttributes("0_0_23200_1000.h5", "/hydro/data/channel flow")
h5readAttributes("0_0_23200_1000.h5", "/hydro/data/")
h5readAttributes("0_0_23200_1000.h5", "/hydro/")
h5ls("0_0_23200_1000.h5")
?h5ls
test1 = list(1, 2)
test1
test2 = list(2, 10)
test2/test2
runApp()
runApp()
runApp()
runApp()
?showNotification
runApp()
runApp()
shiny::runApp()
install.packages(c("dplyr", "httpuv", "mvtnorm", "packrat", "pillar", "purrr", "Rcpp", "rlang", "shiny", "shinyWidgets", "stringr", "tidyr", "utf8"))
shiny::runApp()
?fileInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?showNotification
?interval
?seq
?lubidrate::seq
?lubridate::seq
?seq
?interval
?validate
seq(from = ymd_hms("2018-01-01 05:00:00"), length.out = 10, by = "15 min")
seq(from = ymd_hms("2018-01-01 05:00:00"), length.out = 10, by = "1 hr")
seq(from = ymd_hms("2018-01-01 05:00:00"), length.out = 10, by = "1 hour")
runApp()
runApp()
all.equal(1:10, 15:20)
?all.equal
all.equal(1:10, 1:10)
all.equal(1:10, 2:11)
!all.equal(1:10, 2:11)
?identical
identical(1:10, 2:11)
identical(1:10, 15:20)
runApp()
channels
runApp()
shiny::runApp()
h5read("ExportsHigh.h5", "/hydro/geometry/channel_location")
h5read("sjr1500_omr2500_OUT.h5", "/hydro/geometry/channel_location")
x = h5read("sjr1500_omr2500_OUT.h5", "/hydro/geometry/channel_location")
x
gsub(pattern = " ", replacement = "", x)
gsub(pattern = " ", replacement = "", x)
toupper(gsub(pattern = " ", replacement = "", x))
?toupper
simple_cap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")
}
process_nodes <- function(x){
simple_cap(gsub(pattern = " ", replacement = "", x)) # node locations included whitespace; also wanted the first letter capitalized
}
process_nodes(x)
x
?sapply
process_nodes <- function(x){
x = gsub(pattern = " ", replacement = "", x) # node locations included whitespace;
x = sapply(x, simple_cap) # first letter capitalized
}
process_nodes(x)
x
process_nodes <- function(x){
x = gsub(pattern = " ", replacement = "", x) # node locations included whitespace;
x = sapply(x, simple_cap) # first letter capitalized
return(x)
}
x
process_nodes(x)
?sapply
process_nodes <- function(x){
x = gsub(pattern = " ", replacement = "", x) # node locations included whitespace;
x = sapply(x, simple_cap, USE.NAMES = FALSE) # first letter capitalized
return(x)
}
?sapply
process_nodes(x)
runApp()
?which
runApp()
?zip
shinyWidgets::shinyWidgetsGallery()
runApp()
?actionButton
runApp()
source("Functions.R")
options(shiny.maxRequestSize = 1000*1024^2) # increase upload size to 1000 MB (1 GB)
# source("https://bioconductor.org/biocLite.R")
# biocLite("rhdf5")
library(shiny)
library(leaflet)
library(dplyr)
library(ggplot2)
library(rhdf5)
library(lubridate)
library(shinyWidgets)
# this app also uses plyr package (i.e., need to be installed), but are not loaded here because used sparingly (one or two functions from each package)
source("Functions.R")
calc_summary_stats <- function(arr.2d, time.dim, new.id){
tibble(new.id = new.id,
channel = sdc,
min = apply(arr.2d, time.dim, min, na.rm = TRUE),
first.quart = apply(arr.2d, time.dim, quantile, probs = 0.25, na.rm = TRUE),
median = apply(arr.2d, time.dim, median, na.rm = TRUE),
mean = apply(arr.2d, time.dim, mean, na.rm = TRUE),
third.quart = apply(arr.2d, time.dim, quantile, probs = 0.75, na.rm = TRUE),
max = apply(arr.2d, time.dim, max, na.rm = TRUE),
prop.neg = apply(arr.2d, time.dim, function(x) sum(x < 0, na.rm = TRUE)/length(x)),
prop.pos = apply(arr.2d, time.dim, function(x) sum(x > 0, na.rm = TRUE)/length(x)))
}
which(1:10 %in% c(5, 7, 3))
calc_summary_stats <- function(arr.2d, time.dim, channels){
tibble(channel = channels,
min = apply(arr.2d, time.dim, min, na.rm = TRUE),
first.quart = apply(arr.2d, time.dim, quantile, probs = 0.25, na.rm = TRUE),
median = apply(arr.2d, time.dim, median, na.rm = TRUE),
mean = apply(arr.2d, time.dim, mean, na.rm = TRUE),
third.quart = apply(arr.2d, time.dim, quantile, probs = 0.75, na.rm = TRUE),
max = apply(arr.2d, time.dim, max, na.rm = TRUE),
prop.neg = apply(arr.2d, time.dim, function(x) sum(x < 0, na.rm = TRUE)/length(x)))
}
runApp()
runApp()
runApp()
runApp()
shinyWidgets::shinyWidgetsGallery()
runApp()
shinyWidgets::shinyWidgetsGallery()
runApp()
?actionBttn
runApp()
runApp()
View(cll)
runApp()
runApp()
?scale_color_brewer
runApp()
runApp()
runApp()
?radioGroupButtons
runApp()
runApp()
cll
head(cll)
ggplot(cll, aes(x = lat, y = long)) + geom_point()
ggplot(cll, aes(x = long, y = lat)) + geom_point()
ggplot(cll, aes(x = long, y = lat)) + geom_point() + theme.standard
shiny::runApp()
?pickerInput
runApp()
runApp()
?dateRangeInput
runApp()
runApp()
?withProgress
25/208
257*0.12
257-31
runApp()
test = readRDS("../Planning Simulations/2016/delta-hydro-density-data/flow/Channel_10.rds")
?withProgress
runApp()
runApp()
test = list()
test[["one"]][["two"]] = 1:10
test
str(test)
test[["one"]][["three"]] = 12:20
test
test[["two"]][["three"]] = 12:20
str(test)
test[["two"]][[4]] = 12:20
test
str(test)
runApp()
runApp()
runApp()
runApp()
?fluidRow
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test = density.out[["velocity"]]
View(test)
unique(test$comp)
unique(test$scenario)
ggplot(test) +
geom_density(aes(x = x, y = y, fill = factor(scenario), col = factor(scenario)), stat = "identity", alpha = 0.6)
ggplot(test %>% filter(channel == 1)) +
geom_density(aes(x = x, y = y, fill = factor(scenario), col = factor(scenario)), stat = "identity", alpha = 0.6)
runApp()
filter(test, channel == 201)
View(filter(test, channel == 201))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?wellPanel
runApp()
?observeEvent
library(shinyjs)
?toggle
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?show
runApp()
?disable
runApp()
shiny::runApp()
runApp()
?observe
runApp()
?toggle
runApp()
?updatePickerInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?toggle
?toggleState
runApp()
runApp()
runApp()
runApp()
?setView
runApp()
runApp()
?toggle
runApp()
runApp()
runApp()
runApp()
x = 1:10
x[x != 7]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?req
runApp()
runApp()
runApp()
runApp()
runApp()
1:10 %in% NULL
!(1:10 %in% NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?p
runApp()
?h5read
h5_read <- function(data, name){
out = list()
for (i in 1:nrow(data)){
out[[data$scenario[i]]] = h5read(data$datapath[i], paste0("/hydro/", name))
}
}
process_nodes
runApp()
?h5readAttributes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?put_object
?aws.s3::put_object
# code for moving example files to S3 bucket
library(aws.s3)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
?library
getOption("repos")
file.exists("~/.Rprofile")
site_path = R.home(component = "home")
fname = file.path(site_path, "etc", "Rprofile.site")
file.exists(fname)
if(!file.exists("~/.Rprofile")) # only create if not already there
file.create("~/.Rprofile")    # (don't overwrite it)
file.edit("~/.Rprofile")
file.exists("~/.Rprofile")
getwd()
bioc <- local({
env <- new.env()
on.exit(rm(env))
evalq(source("http://bioconductor.org/biocLite.R", local = TRUE), env)
biocinstallRepos()
})
bioc
getOption("repos")
shiny::runApp()
rsconnect::deployApp()
file.exists("~/.Rprofile")
file.remove("~/.Rprofile")
file.exists("~/.Rprofile")
site_path = R.home(component = "home")
fname = file.path(site_path, "etc", "Rprofile.site")
file.exists(fname)
fname
if(!file.exists(fname)) # only create if not already there
file.create(fname)    # (don't overwrite it)
file.edit(fname)
shiny::runApp()
rsconnect::deployApp()
file.edit(fname)
site_path = R.home(component = "home")
fname = file.path(site_path, "etc", "Rprofile.site")
file.edit(fname)
file.remove(fname)
shiny::runApp()
rsconnect::deployApp()
shiny::runApp()
rsconnect::deployApp()
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
bioc <- local({
env <- new.env()
on.exit(rm(env))
evalq(source("http://bioconductor.org/biocLite.R", local = TRUE), env)
biocinstallRepos()
})
bioc
shiny::runApp()
rsconnect::deployApp()
runApp()
runApp()
rsconnect::deployApp()
devtools::source_gist(id = "4351fe4185507fb2e4fc99c189a0f885", filename = "DSM2VizLaunchScript.R")
install.packages("git2r")
install.packages("survival")
install.packages("survival", options(install.packages.check.source = "no"))
?options
options(install.packages.check.source = "no")
install.packages("survival")
options
getOption("install.packages.check.source")
options("install.packages.compile.from.source" = "never")
install.packages("survival")
getOption("install.packages.check.source")
getOption("install.packages.compile.from.source")
getOption("install.packages.compile.from.source")
shiny::runApp()
runApp()
rsconnect::deployApp()
shiny::runApp()
shiny::runApp()
rsconnect::deployApp()
39896/128046
39896/88150
?req
?shiny::req
?noquote
x = noquote("test")
x
rm(x)
boxplot(runif(10))
boxplot(rnorm(50))
boxplot(rnorm(1000))
boxplot(runif(20))
x = runif(10)
x
boxplot(x)
summary(x)
rm(x)
228.62+140-5-25-25
